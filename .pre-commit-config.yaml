ci:
  autofix_prs: false

repos:
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.3.0
    hooks:
      - id: check-added-large-files
        # Prevent giant files from being committed.
      - id: check-ast
        # Simply check whether files parse as valid python.
      - id: check-case-conflict
        # Check for files with names that would conflict on a case-insensitive
        # filesystem like MacOS HFS+ or Windows FAT.
      - id: check-json
        # Attempts to load all json files to verify syntax.
      - id: check-merge-conflict
        # Check for files that contain merge conflict strings.
      - id: check-symlinks
        # Checks for symlinks which do not point to anything.
      - id: check-toml
        # Attempts to load all TOML files to verify syntax.
      - id: check-xml
        # Attempts to load all xml files to verify syntax.
      - id: check-yaml
        # Attempts to load all yaml files to verify syntax.
      - id: debug-statements
        # Check for debugger imports and py37+ breakpoint() calls in python
        # source.
      - id: detect-private-key
        # Checks for the existence of private keys.
      - id: end-of-file-fixer
        # Makes sure files end in a newline and only a newline.
        exclude: ".*(data.*|extern.*|licenses.*|_parsetab.py)$"
      # - id: fix-encoding-pragma  # covered by pyupgrade
      - id: trailing-whitespace
        # Trims trailing whitespace.
        exclude: ".*(data.*|extern.*|licenses.*|_parsetab.py|test_cds.py)$"

  - repo: https://github.com/pre-commit/pygrep-hooks
    rev: v1.9.0
    hooks:
      - id: python-check-mock-methods
        # Prevent common mistakes of assert mck.not_called(), assert
        # mck.called_once_with(...) and mck.assert_called.
      - id: rst-directive-colons
        # Detect mistake of rst directive not ending with double colon.
      - id: rst-inline-touching-normal
        # Detect mistake of inline code touching normal text in rst.
      - id: text-unicode-replacement-char
        # Forbid files which have a UTF-8 Unicode replacement character.

  - repo: https://github.com/pycqa/isort
    rev: 5.10.1
    hooks:
      - id: isort
        name: isort (python)
        additional_dependencies: [toml]
      - id: isort
        name: isort (pyi)
        types: [pyi]
        additional_dependencies: [toml]
      - id: isort
        name: isort (cython)
        types: [cython]
        additional_dependencies: [toml]

  - repo: https://github.com/asottile/pyupgrade
    rev: v2.38.0
    hooks:
      - id: pyupgrade
        args: ["--py38-plus"]
        exclude: ".*(extern.*|_parsetab.py|_lextab.py)$"

  - repo: https://github.com/PyCQA/flake8
    rev: 5.0.4
    hooks:
      - id: flake8
        # We list the warnings/errors to check for here rather than in setup.cfg because
        # we don't want these options to apply whenever anyone calls flake8 from the
        # command-line or their code editor - in this case all warnings/errors should be
        # checked for. The warnings/errors we check for here are:
        args:
          [
            '--count',
            # default ignores: E121,E123,E126,E226,E24,E704,W503,W504,W505
            "--select",
            # "F401,",  # module imported but unused
            # "F402,",  # import module from line N shadowed by loop variable
            # "F403,",  # ‘from module import *’ used; unable to detect undefined names
            # "F404,",  # future import(s) name after other statements
            # "F405,",  # name may be undefined, or defined from star imports: module
            # "F406,",  # ‘from module import *’ only allowed at module level
            # "F407,",  # an undefined future feature name was imported
            # "F501,",  # invalid % format literal
            # "F502,",  # % format expected mapping but got sequence
            # "F503,",  # % format expected sequence but got mapping
            # "F504,",  # % format unused named arguments
            # "F505,",  # % format missing named arguments
            # "F506,",  # % format mixed positional and named arguments
            # "F507,",  # % format mismatch of placeholder and argument count
            # "F508,",  # % format with * specifier requires a sequence
            # "F509,",  # % format with unsupported format character
            # "F521,",  # .format(...) invalid format string
            # "F522,",  # .format(...) unused named arguments
            # "F523,",  # .format(...) unused positional arguments
            # "F524,",  # .format(...) missing argument
            # "F525,",  # .format(...) mixing automatic and manual numbering
            # "F541,",  # f-string without any placeholders
            # "F601,",  # dictionary key name repeated with different values
            # "F602,",  # dictionary key variable name repeated with different values
            # "F621,",  # too many expressions in an assignment with star-unpacking
            # "F622,",  # two or more starred expressions in an assignment (a, *b, *c = d)
            # "F631,",  # assertion test is a tuple, which is always True
            # "F632,",  # use ==/!= to compare str, bytes, and int literals
            # "F633,",  # use of >> is invalid with print function
            # "F634,",  # if test is a tuple, which is always True
            # "F701,",  # a break statement outside of a while or for loop
            # "F702,",  # a continue statement outside of a while or for loop
            # "F703,",  # a continue statement in a finally block in a loop
            # "F704,",  # a yield or yield from statement outside of a function
            # "F706,",  # a return statement outside of a function/method
            # "F707,",  # an except: block as not the last exception handler
            # "F721,",  # syntax error in doctest
            # "F722,",  # syntax error in forward annotation
            # "F723,",  # syntax error in type comment
            # "F811,",  # redefinition of unused name from line N
            # "F821,",  # undefined name name
            "F822,",  # undefined name in __all__
            "F823,",  # local variable name referenced before assignment
            # "F831,",  # duplicate argument name in function definition
            # "F841,",  # local variable name is assigned to but never used
            # "F901,",  # raise NotImplemented should be raise NotImplementedError
            "E101,",  # mix of tabs and spaces
            "E111,",  # 4 spaces per indentation level
            "E112,",  # 4 spaces per indentation level
            "E113,",  # 4 spaces per indentation level
            # "E114,",  # indentation is not a multiple of four (comment)
            # "E115,",  # expected an indented block (comment)
            # "E116,",  # unexpected indentation (comment)
            # "E117,",  # over-indented
            # "E121,",  # (*^) continuation line under-indented for hanging indent
            # "E122,",  # (^)continuation line missing indentation or outdented
            # "E123,",  # (*)closing bracket does not match indentation of opening bracket’s line
            # "E124,",  # (^)closing bracket does not match visual indentation
            # "E125,",  # (^)continuation line with same indent as next logical line
            # "E126,",  # (*^) continuation line over-indented for hanging indent
            # "E127,",  # (^)continuation line over-indented for visual indent
            # "E128,",  # (^)continuation line under-indented for visual indent
            # "E129,",  # (^)visually indented line with same indent as next logical line
            # "E131,",  # (^)continuation line unaligned for hanging indent
            # "E133,",  # (*)closing bracket is missing indentation
            "E201,",  # whitespace after '('
            "E202,",  # whitespace before ')'
            # "E203,",  # whitespace before ‘,’, ‘;’, or ‘:’
            # "E211,",  # whitespace before ‘(’
            # "E221,",  # multiple spaces before operator
            # "E222,",  # multiple spaces after operator
            # "E223,",  # tab before operator
            # "E224,",  # tab after operator
            # "E225,",  # missing whitespace around operator
            # "E226,",  # (*) missing whitespace around arithmetic operator
            # "E227,",  # missing whitespace around bitwise or shift operator
            # "E228,",  # missing whitespace around modulo operator
            # "E231,",  # missing whitespace after ‘,’, ‘;’, or ‘:’
            # "E241,",  # (*) multiple spaces after ‘,’
            # "E242,",  # (*) tab after ‘,’
            # "E251,",  # unexpected spaces around keyword / parameter equals
            # "E261,",  # at least two spaces before inline comment
            # "E262,",  # inline comment should start with ‘# ‘
            # "E265,",  # block comment should start with ‘# ‘
            # "E266,",  # too many leading ‘#’ for block comment
            # "E271,",  # multiple spaces after keyword
            # "E272,",  # multiple spaces before keyword
            # "E273,",  # tab after keyword
            # "E274,",  # tab before keyword
            # "E275,",  # missing whitespace after keyword
            "E301,",  # expected 1 blank line, found 0
            "E302,",  # expected 2 blank lines, found 0
            "E303,",  # too many blank lines (3)
            "E304,",  # blank lines found after function decorator
            "E305,",  # expected 2 blank lines after class or function definition
            "E306,",  # expected 1 blank line before a nested definition
            # "E401,",  # multiple imports on one line
            # "E402,",  # module level import not at top of file
            # "E501,",  # line too long (82 > 79 characters)
            "E502,",  # the backslash is redundant between brackets
            # "E701,",  # multiple statements on one line (colon)
            # "E702,",  # multiple statements on one line (semicolon)
            # "E703,",  # statement ends with a semicolon
            # "E704,",  # (*) multiple statements on one line (def)
            # "E711,",  # (^) comparison to None should be ‘if cond is None:’
            # "E712,",  # (^) comparison to True should be ‘if cond is True:’ or ‘if cond:’
            # "E713,",  # test for membership should be ‘not in’
            # "E714,",  # test for object identity should be ‘is not’
            # "E721,",  # (^) do not compare types, use ‘isinstance()’
            "E722,",  # do not use bare except
            # "E731,",  # do not assign a lambda expression, use a def
            # "E741,",  # do not use variables named ‘l’, ‘O’, or ‘I’
            # "E742,",  # do not define classes named ‘l’, ‘O’, or ‘I’
            # "E743,",  # do not define functions named ‘l’, ‘O’, or ‘I’
            "E901,",  # SyntaxError or IndentationError
            "E902,",  # IOError
            "E999,",  # SyntaxError -- failed to compile a file into an Abstract Syntax Tree
            "W191,",  # use of tabs
            "W291,",  # trailing whitespace
            "W292,",  # no newline at end of file
            "W293,",  # trailing whitespace
            "W391,",  # blank line at end of file
            # "W503,",  # line break before binary operator
            # "W504,",  # line break after binary operator
            # "W505,",  # doc line too long (82 > 79 characters)
            # "W601,",  # .has_key() is deprecated, use ‘in’
            # "W602,",  # deprecated form of raising exception
            # "W603,",  # ‘<>’ is deprecated, use ‘!=’
            # "W604,",  # backticks are deprecated, use ‘repr()’
            # "W605,",  # invalid escape sequence ‘x’
            # "W606,",  # ‘async’ and ‘await’ are reserved keywords starting with Python 3.7
          ]
        exclude: ".*(data.*|extern.*|cextern)$"

  - repo: local
    hooks:
      - id: changelogs-rst
        name: changelog filenames
        language: fail
        entry: >-
          changelog files must be named <sub-package>/####.(bugfix|feature|api).rst
          or ####.other.rst (in the root directory only)
        exclude: >-
          ^docs/changes/[\w\.]+/(\d+\.(bugfix|feature|api)(\.\d)?.rst|.gitkeep)
        files: ^docs/changes/[\w\.]+/
      - id: changelogs-rst-other
        name: changelog filenames for other category
        language: fail
        entry: >-
          only "other" changelog files must be placed in the root directory
        exclude: >-
          ^docs/changes/(\d+\.other.rst|README.rst|template.rst)
        files: ^docs/changes/\d+.\w+.rst
